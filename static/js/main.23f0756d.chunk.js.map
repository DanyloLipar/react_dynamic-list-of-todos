{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["request","endpoint","a","fetch","url","json","wait","delay","Promise","resolve","setTimeout","getUser","id","TodoList","todos","selectedUser","selectedUserId","className","map","todo","classnames","TodoList__item","completed","htmlFor","checked","type","readOnly","title","userId","onClick","CurrentUser","useState","user","setUser","loading","setLoading","useEffect","then","userFromServer","name","email","phone","App","setSelectedUserId","setTodos","progress","setProgress","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"kTAKMA,EAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACIC,MAAM,GAAD,OAHR,qCAGQ,OAAeF,IADxB,cACRG,EADQ,yBAGPA,EAAIC,QAHG,2CAAH,sDAMb,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAG7C,IAIMI,EAAO,uCAAG,WAAOC,GAAP,SAAAV,EAAA,sEACfI,EAAK,KADU,gCAGdN,EAAQ,UAAD,OAAWY,KAHJ,2CAAH,sD,+BCRPC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,eAAxB,OACvC,sBAAKC,UAAU,WAAf,UACE,wCAEA,qBAAKA,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBAEEF,UAAWG,IAAW,CACpBC,gBAAgB,EAChB,6BAA8BF,EAAKG,UACnC,0BAA2BH,EAAKG,YALpC,UAQE,wBAAOC,QAAO,UAAKJ,EAAKP,IAAxB,UACE,uBACEY,QAASL,EAAKG,UACdV,GAAE,UAAKO,EAAKP,IACZa,KAAK,WACLC,UAAQ,IAEV,4BAAIP,EAAKQ,WAGX,yBACEV,UAAWG,IACT,wBACA,CAAE,kCAAmCJ,IAAmBG,EAAKS,QAC7D,UAEFH,KAAK,SACLI,QAAS,kBAAMd,EAAaI,EAAKS,SAPnC,qBAUGT,EAAKS,YA3BHT,EAAKP,eCVTkB,G,MAA+B,SAAC,GAAgB,IAAdF,EAAa,EAAbA,OAC7C,EAAwBG,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KASA,OAPAC,qBAAU,WACRD,GAAW,GACXxB,EAAQiB,GACLS,MAAK,SAAAC,GAAc,OAAIL,EAAQK,MAC/BD,MAAK,kBAAMF,GAAW,QACxB,CAACP,IAGF,8BACGM,EACC,sBAAKjB,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SAAmC,sDAAgBe,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAMpB,QACzD,oBAAIK,UAAU,oBAAd,gBAAmCe,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMO,OACzC,mBAAGtB,UAAU,qBAAb,gBAAmCe,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMQ,QACzC,mBAAGvB,UAAU,qBAAb,gBAAmCe,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMS,WAIzC,kDCiBKC,EAxCO,WACpB,MAA4CX,mBAAS,GAArD,mBAAOf,EAAP,KAAuB2B,EAAvB,KACA,EAA0BZ,mBAAiB,IAA3C,mBAAOjB,EAAP,KAAc8B,EAAd,KACA,EAAgCb,oBAAS,GAAzC,mBAAOc,EAAP,KAAiBC,EAAjB,KAUA,OARAV,qBAAU,WHGHpC,EAAQ,UGDVqC,MAAK,SAAAU,GACJH,EAASG,MAEVV,MAAK,kBAAMS,GAAY,QACzB,IAGD,mCACGD,EACC,sBAAK5B,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACED,eAAgBA,EAChBD,aAAc4B,EACd7B,MAAOA,MAIX,qBAAKG,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGD,EACC,cAAC,EAAD,CAAaY,OAAQZ,IACnB,0BAKV,mDCvCRgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.23f0756d.chunk.js","sourcesContent":["import { User } from '../types/User';\nimport { Todo } from '../types/Todo';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nconst request = async (endpoint: string) => {\n  const url = await fetch(`${BASE_URL}${endpoint}`);\n\n  return url.json();\n};\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return request('/todos');\n};\n\nexport const getUser = async (id: number): Promise<User> => {\n  await wait(1000);\n\n  return request(`/users/${id}`);\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectedUser: (id: number) => void,\n  selectedUserId: number\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, selectedUser, selectedUserId }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classnames({\n              TodoList__item: true,\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })}\n          >\n            <label htmlFor={`${todo.id}`}>\n              <input\n                checked={todo.completed}\n                id={`${todo.id}`}\n                type=\"checkbox\"\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classnames(\n                'TodoList__user-button',\n                { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n                'button',\n              )}\n              type=\"button\"\n              onClick={() => selectedUser(todo.userId)}\n            >\n              User&nbsp;\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(false);\n    getUser(userId)\n      .then(userFromServer => setUser(userFromServer))\n      .then(() => setLoading(true));\n  }, [userId]);\n\n  return (\n    <div>\n      {loading ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\"><span>{`User: ${user?.id}`}</span></h2>\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        </div>\n      )\n        : (\n          <p>In process...</p>\n        )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [progress, setProgress] = useState(false);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n      })\n      .then(() => setProgress(true));\n  }, []);\n\n  return (\n    <>\n      {progress ? (\n        <div className=\"App\">\n          <div className=\"App__sidebar\">\n            <TodoList\n              selectedUserId={selectedUserId}\n              selectedUser={setSelectedUserId}\n              todos={todos}\n            />\n          </div>\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser userId={selectedUserId} />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <p>Loading data...</p>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}